CREATE TABLE anim_kingdom (
	kingdom_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	level_kingdom TEXT NOT NULL,
	title TEXT NOT NULL
);

CREATE TABLE closure_table (
	ancestor INTEGER NOT NULL,
	descendant INTEGER NOT NULL,
	PRIMARY KEY (ancestor, descendant),
	FOREIGN KEY (ancestor) REFERENCES anim_kingdom(kingdom_id),
	FOREIGN KEY (descendant) REFERENCES anim_kingdom(kingdom_id)
);

//Получение всех потомков в программе через рекурсию используя получение прямых потомков.
Там же и уровень глубины считается. Получение прямых потомков без рекурсии
SELECT p1.* 
	FROM closure_table as p1
	LEFT JOIN (
		closure_table as p2 INNER JOIN closure_table as p3 ON p2.descendant = p3.ancestor
	) ON p2.ancestor = p1.ancestor 
	 AND p3.descendant = p1.descendant 
	 AND p2.ancestor <> p2.descendant
	 AND p3.ancestor <> p3.descendant
	WHERE p1.ancestor = 1 and p2.ancestor is NULL;

//Получение прямого родителя. Для получения всех родителей в иерархии аналогично выше.
SELECT p1.ancestor, p1.descendant
FROM closure_table as p1
LEFT JOIN (
	closure_table as p2 INNER JOIN closure_table as p3 ON p2.ancestor = p3.descendant
) ON p2.descendant = p1.descendant
 AND p3.ancestor = p1.ancestor
 AND p2.ancestor <> p2.descendant
 AND p3.ancestor <> p3.descendant
WHERE p1.descendant = 8 and p2.descendant is NULL;

// Удаление узла или листа
DELETE FROM nested_sets WHERE kingdom_id = 6

// Удаление поддерева
DELETE FROM closure_table WHERE descendant IN (SELECT descendant FROM closure_table WHERE ancestor = 2)

// Вставка листа
INSERT INTO anim_kingdom (level_kingdom, title) VALUES ('" + level_kingdom + "', '" + title + "') RETURNING kingdom_id
INSERT INTO closure_table (ancestor, descendant) SELECT closure_table.ancestor, " + strconv.Itoa(new_id) + " FROM closure_table WHERE closure_table.descendant = '" + strconv.Itoa(toWhatId)+ "' UNION ALL SELECT '" + strconv.Itoa(new_id) + "','" + strconv.Itoa(new_id) + "'	

// Перемещение поддерева , аналогично для перещения узла и листа.
--Отсоединяем поддерево
DELETE FROM closure_table WHERE descendant IN (SELECT descendant FROM closure_table WHERE ancestor = 7) AND ancestor IN (SELECT ancestor FROM closure_table WHERE descendant = 7 AND ancestor <> descendant)
--Переносим поддерево
INSERT INTO closure_table (ancestor, descendant) SELECT super.ancestor, sub.descendant FROM closure_table AS super CROSS JOIN closure_table AS sub WHERE super.descendant = 6 AND sub.ancestor = 7
