
CREATE TABLE animal_kingdom (
	kingdom_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	parent_id INTEGER,
	level_kingdom TEXT NOT NULL,
	title TEXT NOT NULL,
	FOREIGN KEY(parent_id) REFERENCES animal_kingdom(kingdom_id) ON DELETE CASCADE
);

//GetAllParents выполняется до тех пор пока выполняется условие
WITH RECURSIVE parents AS (
  SELECT kingdom_id, parent_id, level_kingdom, title, 1 AS level
  FROM animal_kingdom
  WHERE kingdom_id = (SELECT kingdom_id FROM animal_kingdom WHERE title = '" + title + "')
  UNION
  SELECT ak.kingdom_id, ak.parent_id, ak.level_kingdom, ak.title, level+1 AS level
  FROM animal_kingdom ak
  JOIN parents a ON ak.kingdom_id = a.parent_id
)
SELECT kingdom_id, parent_id, level_kingdom, lpad(' ', 5* level) || title
FROM parents;


//GetAllDescendants
WITH RECURSIVE t AS (
   SELECT ARRAY[kingdom_id] AS hierarchy, kingdom_id, parent_id,level_kingdom, title, 1 AS level FROM animal_kingdom
   WHERE  kingdom_id = 2
   UNION ALL
   SELECT t.hierarchy || a.kingdom_id, a.kingdom_id, a.parent_id,a.level_kingdom, a.title, t.level+1 AS level FROM   animal_kingdom a
   JOIN t ON a.parent_id = t.kingdom_id
)
SELECT kingdom_id, parent_id, level_kingdom, (lpad(' ', 5 * level) || title) AS title FROM t
ORDER BY hierarchy;

Недостатки
Постоянная зависимость от одного родителя

сложность обслуживания
сложный просчет глубины

Допустимые способы использования
необходимо получать только прямых потомков и родителей
дерево относительно статично
СУДБ поддерживает рекурсивный CTE